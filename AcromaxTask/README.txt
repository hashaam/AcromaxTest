AcromaxTask was developed to solve Testing task for Acromax Technology. This application downloads and parses m3u8 playlist file from http://pubcache1.arkiva.de/test/hls_index.m3u8 to fetch chunklist of highest audio quality [audio-1] and [hls_a256K_v4.m3u8]. Chunklist URL is generated by:

http://pubcache1.arkiva.de/test/[chunklist.m3u8]

so, following URL is used to fetch chunklist

http://pubcache1.arkiva.de/test/hls_a256K_v4.m3u8

This chunklist file is further parsed in order to get chunks list along with their byte-ranges used in HTTP Header Parameters to download chunks.

To simultaneously download 2 chunks at a given time, NSOperation Subclass is used FileDownloadOperation and queued in NSOperationQueue with maxConcurrentOperationCount value set to 2.

The application uses ViewModel to consolidate required network code in this file and reports back to ViewController when ever required using completion handlers (closures / blocks).

Once, all chunks have been downloaded, they are merged in their respective order to form a merged.ts file which is then reported back to ViewController using the fileReadyHandler along with merged file URL or error if any. On success, meaning, no error, we create AVPlayer with piano.m4a file and start playing.

All the application states are presented to the user with help of label text updates.

Once the audio starts playing, a swipe gesture with left and right direction swipes can skip 5 seconds forwards or backwards of AVPlayer.

Finally, when the file playback is completed, ViewModel is notified to delete the locally merged file.

For UI circle colors, red color is used to show progress of complete download process and orange color is shown for current playing duration.

The application uses Alamofire cocoapods for network requests.

Process Flow:

AppDelegate -> ViewController -> ViewModel

File List:

piano.m4a
Audio file used to play audio in AVPlayer once all chunks have downloaded and file is merged

Custom Views / CircularProgressView.swift
UIView subclass to show circular progress

Models / StructModels.swift
File having the ChunkStruct which is sent back in an array to ViewModel once chunklist parsing is completed.

Result Handling / PlaylistResultHandling.swift
Actual playlist parsing happens here

Result Handling / ChunkListResultHandling.swift
Actual chunklist parsing happens here

Operations / CustomOperation.swift
Subclass of NSOperation / Operation to wrap any kind of code in operation

Operations / NetworkOperation.swift
Subclass of CustomOperation to wrap network requests using Alamofire

Operations / FileDownloadOperation.swift
Subclass of CustomOperation to download file using Alamofire

AppConfig.swift
File containing the URLs of required locations and also debug flag (DEBUG_PRINT_REQUESTS) to debug Alamofire requests which prints curl commands

Core.swift
Any extra methods used by the app are added here. For example, to show alert or helper method for playlist parsing

